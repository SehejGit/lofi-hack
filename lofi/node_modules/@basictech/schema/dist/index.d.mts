declare function generateEmptySchema(project_id?: string, version?: number): {
    project_id: string;
    version: number;
    tables: {
        foo: {
            name: string;
            type: string;
            fields: {
                bar: {
                    type: string;
                    required: boolean;
                };
            };
        };
    };
};
type Schema = {
    project_id: string;
    version: number;
    tables: any;
};
/**
 * Compare two schemas and detect any differences between them
 * @param oldSchema - The original schema to compare against
 * @param newSchema - The new schema to compare with the original
 * @returns {Object} Comparison result containing:
 *   - valid: boolean indicating if schemas are identical
 *   - changes: Array of detected changes between schemas
 */
declare function compareSchemas(oldSchema: any, newSchema: any): {
    valid: boolean;
    changes: SchemaChange[];
};
/**
 * Validate a schema
 * only checks if the schema is formatted correctly, not if can be published
 * @param schema - The schema to validate
 * @returns {valid: boolean, errors: any[]} - The validation result
 */
declare function validateSchema(schema: Schema): {
    valid: boolean;
    errors: ErrorObject[];
};
type ErrorObject = {
    keyword?: string;
    instancePath?: string;
    schemaPath?: string;
    params?: Record<string, any>;
    propertyName?: string;
    message?: string;
    schema?: any;
    parentSchema?: any;
    data?: any;
};
/**
 * Validate data against a schema's table definition. Only checks against provided schema.
 * @param schema - The schema to validate against
 * @param table - The table name in the schema to validate against
 * @param data - The data object to validate
 * @param checkRequired - Whether to check if required fields are present (default: true)
 * @returns {Object} Validation result containing:
 *   - valid: boolean indicating if validation passed
 *   - errors: Array of validation error objects
 *   - message: Error message if validation failed
 */
declare function validateData(schema: Schema, table: string, data: Record<string, any>, checkRequired?: boolean): {
    valid: boolean;
    errors?: ErrorObject[];
    message?: string;
};
type SchemaChangeType = "property_changed" | "property_removed" | "table_added" | "table_removed" | "field_added" | "field_removed" | "field_type_changed" | "field_required_changed" | "field_property_added" | "field_property_changed" | "field_property_removed";
type SchemaChange = {
    type: SchemaChangeType;
    property?: string;
    table?: string;
    field?: string;
    old?: any;
    new?: any;
};
declare function validateUpdateSchema(oldSchema: any, newSchema: any): {
    valid: boolean;
    errors: ErrorObject[];
    message: string;
    changes?: undefined;
} | {
    valid: boolean;
    changes: SchemaChange[];
    errors: never[];
    message?: undefined;
};
/**
 * Get the JSON schema definition for the Basic Schema
 * @returns {Object} The JSON schema
 */
declare function getJsonSchema(): {
    $schema: string;
    type: string;
    properties: {
        project_id: {
            type: string;
        };
        namespace: {
            type: string;
        };
        version: {
            type: string;
            minimum: number;
        };
        tables: {
            type: string;
            propertyNames: {
                pattern: string;
                minLength: number;
                maxLength: number;
                type: string;
            };
            patternProperties: {
                "^[a-zA-Z0-9_]+$": {
                    type: string;
                    propertyNames: {
                        pattern: string;
                        minLength: number;
                        maxLength: number;
                        type: string;
                    };
                    properties: {
                        name: {
                            type: string;
                        };
                        type: {
                            type: string;
                            enum: string[];
                        };
                        origin: {
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    enum: string[];
                                };
                                project_id: {
                                    type: string;
                                };
                                table: {
                                    type: string;
                                };
                                version: {
                                    type: string;
                                };
                            };
                            if: {
                                properties: {
                                    type: {
                                        const: string;
                                    };
                                };
                            };
                            then: {
                                required: string[];
                            };
                        };
                        fields: {
                            type: string;
                            propertyNames: {
                                pattern: string;
                                minLength: number;
                                maxLength: number;
                                type: string;
                            };
                            patternProperties: {
                                "^[a-zA-Z0-9_]+$": {
                                    type: string;
                                    properties: {
                                        type: {
                                            type: string;
                                            enum: string[];
                                        };
                                        indexed: {
                                            type: string;
                                        };
                                        required: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                };
                            };
                            additionalProperties: boolean;
                        };
                    };
                    required: string[];
                };
            };
            additionalProperties: boolean;
        };
    };
    required: string[];
};

export { compareSchemas, generateEmptySchema, getJsonSchema, validateData, validateSchema, validateUpdateSchema };
